// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: grpc/funwheel.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FunWheelService_CreateWheel_FullMethodName = "/funwheel.FunWheelService/CreateWheel"
	FunWheelService_AddOption_FullMethodName   = "/funwheel.FunWheelService/AddOption"
	FunWheelService_SpinWheel_FullMethodName   = "/funwheel.FunWheelService/SpinWheel"
	FunWheelService_ViewOptions_FullMethodName = "/funwheel.FunWheelService/ViewOptions"
)

// FunWheelServiceClient is the client API for FunWheelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunWheelServiceClient interface {
	CreateWheel(ctx context.Context, in *CreateWheelRequest, opts ...grpc.CallOption) (*CreateWheelResponse, error)
	AddOption(ctx context.Context, in *AddOptionRequest, opts ...grpc.CallOption) (*AddOptionsResponse, error)
	SpinWheel(ctx context.Context, in *SpinWheelRequest, opts ...grpc.CallOption) (*SpinWheelResponse, error)
	ViewOptions(ctx context.Context, in *ViewOptionsRequest, opts ...grpc.CallOption) (*ViewOptionsResponse, error)
}

type funWheelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunWheelServiceClient(cc grpc.ClientConnInterface) FunWheelServiceClient {
	return &funWheelServiceClient{cc}
}

func (c *funWheelServiceClient) CreateWheel(ctx context.Context, in *CreateWheelRequest, opts ...grpc.CallOption) (*CreateWheelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWheelResponse)
	err := c.cc.Invoke(ctx, FunWheelService_CreateWheel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funWheelServiceClient) AddOption(ctx context.Context, in *AddOptionRequest, opts ...grpc.CallOption) (*AddOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOptionsResponse)
	err := c.cc.Invoke(ctx, FunWheelService_AddOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funWheelServiceClient) SpinWheel(ctx context.Context, in *SpinWheelRequest, opts ...grpc.CallOption) (*SpinWheelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpinWheelResponse)
	err := c.cc.Invoke(ctx, FunWheelService_SpinWheel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funWheelServiceClient) ViewOptions(ctx context.Context, in *ViewOptionsRequest, opts ...grpc.CallOption) (*ViewOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewOptionsResponse)
	err := c.cc.Invoke(ctx, FunWheelService_ViewOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunWheelServiceServer is the server API for FunWheelService service.
// All implementations must embed UnimplementedFunWheelServiceServer
// for forward compatibility.
type FunWheelServiceServer interface {
	CreateWheel(context.Context, *CreateWheelRequest) (*CreateWheelResponse, error)
	AddOption(context.Context, *AddOptionRequest) (*AddOptionsResponse, error)
	SpinWheel(context.Context, *SpinWheelRequest) (*SpinWheelResponse, error)
	ViewOptions(context.Context, *ViewOptionsRequest) (*ViewOptionsResponse, error)
	mustEmbedUnimplementedFunWheelServiceServer()
}

// UnimplementedFunWheelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFunWheelServiceServer struct{}

func (UnimplementedFunWheelServiceServer) CreateWheel(context.Context, *CreateWheelRequest) (*CreateWheelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWheel not implemented")
}
func (UnimplementedFunWheelServiceServer) AddOption(context.Context, *AddOptionRequest) (*AddOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOption not implemented")
}
func (UnimplementedFunWheelServiceServer) SpinWheel(context.Context, *SpinWheelRequest) (*SpinWheelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpinWheel not implemented")
}
func (UnimplementedFunWheelServiceServer) ViewOptions(context.Context, *ViewOptionsRequest) (*ViewOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewOptions not implemented")
}
func (UnimplementedFunWheelServiceServer) mustEmbedUnimplementedFunWheelServiceServer() {}
func (UnimplementedFunWheelServiceServer) testEmbeddedByValue()                         {}

// UnsafeFunWheelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunWheelServiceServer will
// result in compilation errors.
type UnsafeFunWheelServiceServer interface {
	mustEmbedUnimplementedFunWheelServiceServer()
}

func RegisterFunWheelServiceServer(s grpc.ServiceRegistrar, srv FunWheelServiceServer) {
	// If the following call pancis, it indicates UnimplementedFunWheelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FunWheelService_ServiceDesc, srv)
}

func _FunWheelService_CreateWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWheelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunWheelServiceServer).CreateWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunWheelService_CreateWheel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunWheelServiceServer).CreateWheel(ctx, req.(*CreateWheelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunWheelService_AddOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunWheelServiceServer).AddOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunWheelService_AddOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunWheelServiceServer).AddOption(ctx, req.(*AddOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunWheelService_SpinWheel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinWheelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunWheelServiceServer).SpinWheel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunWheelService_SpinWheel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunWheelServiceServer).SpinWheel(ctx, req.(*SpinWheelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunWheelService_ViewOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunWheelServiceServer).ViewOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunWheelService_ViewOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunWheelServiceServer).ViewOptions(ctx, req.(*ViewOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunWheelService_ServiceDesc is the grpc.ServiceDesc for FunWheelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunWheelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funwheel.FunWheelService",
	HandlerType: (*FunWheelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWheel",
			Handler:    _FunWheelService_CreateWheel_Handler,
		},
		{
			MethodName: "AddOption",
			Handler:    _FunWheelService_AddOption_Handler,
		},
		{
			MethodName: "SpinWheel",
			Handler:    _FunWheelService_SpinWheel_Handler,
		},
		{
			MethodName: "ViewOptions",
			Handler:    _FunWheelService_ViewOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/funwheel.proto",
}
